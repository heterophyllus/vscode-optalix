{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "optalix",
	"scopeName": "source.optalix",
	"patterns": [
		 {
			 "include": "#comments"
		 },
		 {
			 "include": "#numbers"
		 },
		 {
			 "include": "#strings"
		 },
		 {
			 "include": "#variables"
		 },
		 {
			 "include": "#preprocessors"
		 },
		 {
			 "include": "#controls"
		 },
		 {
			 "include": "#qualifiers"
		 },
		 {
			 "include": "#keywords"
		 },
		 {
			 "include": "#functions"
		 }
	],
	"repository": {
		"comments":{
			"patterns":[
				{
					"match": "!.*$",
					"name": "comment.line.optalix"
				}
			]
		},
		"numbers":{
			"patterns":[
				{
					"match": "(?<=[\\s\\-\\+\\*\\/\\\\=:\\(,]|^)\\d*\\.?\\d+([eE][+-]?\\d)?([0-9&&[^\\.]])*\\b",
					"name": "constant.numeric.optalix"
				}
			]
		},
		"strings":{
			"patterns":[
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.optalix"
				 },
				 {
					 "begin": "\"",
					 "end": "\"",
					 "name": "string.quoted.double.optalix"
				 }
			]
		},
		"variables":{
			"patterns":[
				{
					"comment": "user defined variable",
					"match": "(\\$)([a-zA-Z][a-zA-Z0-9_]*)\\b",
					"name": "variable.other.optalix"
				 },
				 {
					"match": "[\\%]\\d+\\b",
					"name": "variable.parameter.optalix"
				 }
			]
		},
		"preprocessors":{
			"patterns": [
				{
					"comment": "file inclusions",
					"match": "^\\s*(\\#include)\\b(.*$)",
					"captures": {
						"1":{
							"name": "keyword.preprocessor.optalix"
						},
						"2":{
							"name": "string.filename.optalix"
						}
					}
				},
				{
					"comment": "define",
					"match": "^\\s*(\\#define)\\b",
					"captures": {
						"1":{
							"name": "keyword.preprocessor.optalix"
						}
					}
				}
			]
		},
		"controls":{
			"patterns":[
				{
					"comment": "RUN statement",
					"match": "\\b((?i)RUN)\\s+([a-zA-Z0-9]\\.mac)\\b",
					"captures": {
						"1":{
							"name": "keyword.control.optalix"
						},
						"2":{
							"name": "string.other.optalix"
						}
					}
				},
				{
					"match": "(^|;|\\(|\\s)((?i)IF|THEN|ELSE|ELSEIF|ENDIF|WHILE|ENDWHILE|DO|ENDDO|RETURN)\\b",
					"captures":{
					   "2":{
						  "name": "keyword.control.optalix"
					   }
					}
				 },
				 {
					 "match": "(^|;|\\(|\\s)((?i)PRINT|EVA|INPUT|OPEN|CLOSE|SELECT)\\b",
					 "captures":{
						"2":{
						   "name": "keyword.language.optalix"
						}
					 }
				 },
				 {
					"match": "(^|;|\\(|\\s)((?i)AND|OR)\\b",
					"name": "keyword.operator.optalix"
				 },
				 {
					"match": "(^|;|\\(|\\s)((?i)YES|NO)\\b",
					"name": "constant.operator.optalix"
				 }
			]
		},
		"qualifiers":{
      		"patterns":[
				{
					"comment": "qualifier with constant number",
					"match": "\\s(?i:[abefgijlqrstuwz](\\d+))\\b",
					"captures":{
						"0":{
							"name": "support.type.qualifier.optalix"
						}
					}
				},
				{
					"comment": "qualifier with special constant character (all, current, last)",
					"match": "\\s(?i:[abefgijlqrstuwz]([acl]))\\b",
					"captures":{
						"0":{
							"name": "support.type.qualifier.optalix"
						}
					}
				},
				{
					"comment": "qualifier with special constant character, especially for surface (image, object, stop)",
					"match": "\\s(?i:[s]([ios]))\\b",
					"captures":{
						"0":{
							"name": "support.type.qualifier.optalix"
						}
					}
				},
				{
					"comment": "qualifier with string label",
					"match": "\\s((?i)[abefgijlqrstuwz])((\".*\")|('.*'))",
					"captures":{
						"1":{
							"name": "support.type.qualifier.optalix"
						},
						"3":{
							"name": "string.quoted.double.optalix"
						},
						"4":{
							"name": "string.quoted.single.optalix"
						}
					}
				},
				{
					"comment": "qualifier with user-defined variable",
					"match": "\\s((?i)[abefgijlqrstuwz])(\\$[a-zA-Z][a-zA-Z0-9_]*)\\b",
					"captures":{
						"1":{
							"name": "support.type.qualifier.optalix"
						},
						"2":{
							"name": "variable.other.optalix"
						}
					}
				},
				{
					"comment": "qualifier with parameter",
					"match": "\\s((?i)[abefgijlqrstuwz])(\\%\\d+)\\b",
					"captures":{
						"1":{
							"name": "support.type.qualifier.optalix"
						},
						"2":{
							"name": "variable.other.optalix"
						}
					}

				},
				{
					"comment": "range qualifier",
					"match": "(\\.{2})((\\d+)|((?i)[acilos]))\\b",
					"captures":{
						"1":{
							"name": "punctuation.definition.range.qualifier.optalix"
						},
						"3":{
							"name": "constant.numeric.optalix"
						},
						"4":{
							"name": "support.type.qualifier.optalix"
						}
					}
				}
			]
		},
		"keywords":{
			"patterns":[
				{
					"comment": "keywords in more than 2 letters (A)",
					"match": "(^|;|\\(|\\[|\\s)((?i)(AAP|AAS|ABBE|ADE|ADNDT|ADX|ADY|AF|AFO|AFR|AIM|AIR|ALG|AMX|AMY|AOI|AOR|AP|APD|APO2|APO3|AR|ARO|ARR|ARX|ARXO|ARY|ARYO|ASD|ASD2|ASF|ASO|ASP|ASTD|ASTI|ASTS|ASTT|ASTS|ASTT|ATT|ATY|AVG|AXG))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(B)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(BAS|BDE|BEA|BEN|BFL|BLD|BLN|BLT|BMP|BP|BPR|BR))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(C)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(CAM|CDE|CEF|CEFDB|CGM|CIND|CIR|CIY|CLC|CLS|COA|COM|COMA|CON|COP|CP|CPI|CPO|CR|CTV|CUX|CUY|CX|CXG|CXN|CY|CYG|CYL|CYN|CZ|CZG|CZN))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(D)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(DAR|DAT|DEF|DEFC|DEL|DEZ|DIM|DIST|DISX|DISY|DLA|DLB|DLF|DLG|DLN|DLR|DLT|DLV|DLX|DLY|DLZ|DMD|DNDT|DNO|DO|DP|DPI|DR|DTR|DVO|DXF))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(E)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(ECE|ECG|ECHO|EDG|EDI|EFL|EIMD|ELE|ELX|ELY|EPD|EPS|EQE|ERRF|ET|EXC|EXI|EXM|EXP|EXR))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(F)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(FACT|FAN|FANL|FCOMP|FDISX|FDISY|FHY|FIE|FIL|FIO|FIR|FLO|FNO|FOO|FOPT|FRA|FRB|FRCR|FRD|FRMM|FRN1|FRN2|FRR|FRX|FRY|FSA|FSB|FSCR|FSD|FSMM|FSN1|FSN2|FSR|FSYM|FTAR|FTYP|FWGT))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(G)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(GADE|GBDE|GCAT|GCDE|GDISP|GDX|GDY|GHO|GHP|GHS|GHV|GIC|GIS|GIT|GL1|GL2|GLA|GLB|GLO|GLP|GNRD|GPSF|GRA|GRD|GRO|GRX|GRY|GSC|GSM|GZO))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(H)",
					"match":"(^|;|\\(|\\s)((?i)(HCI|HCO|HCY|HMX|HMY|HOL|HOM|HOR|HOT|HPGL|HWL|HX1|HX2|HY1|HY2|HZ1|HZ2))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(I)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(IBZ|IC|IFG|IFR|ILL|ILN|IMC|IMD|IMG|IMP|IMPR|IMY|INC|IND|INE|INR|INS|INT|INV|INX|INY|IRR|IRX|IRY|ISF))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(J)"
					
				},
				{
					"comment":"(K)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(KX|KY))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(L)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(LAC|LCA|LD|LDS|LEN|LFC|LFK|LIM|LIS|LVR))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(M)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(M2|MAE|MAG|MAN|MAXFLD|MELT|MFL|MFR|MFRA|MFRF|MHT|MMF|MNA|MNE|MNT|MOD|MOV|MPI|MPR|MRD|MTF|MTF2D|MTFA|MTFS|MTFT|MXA|MXG|MXH|MXT))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(N)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(NA|NAO|NAX|NFLD|NFNC|NNU|NOR|NRD|NSS|NWL))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(O)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(OAL|OBS|OERR|OID|OMN|OOS|OPD|OPDFAN|OPDW|OPL|OPT|ORB|ORGR|OSP|OTH|OUT))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(P)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(PA1|PA2|PATH|PCO|PCX|PETZ|PGO|PIM|PKL|PLO|PLT|PMA|PMI|PNG|POL|POLSTATE|POR|POS|POX|POY|POZ|PPOS|PRD|PRDI|PRE|PRN|PRV|PSF|PTH|PUI|PUX|PUY|PWL))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(Q)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(QSM|QST|QUA))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(R)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(RAD|RAG|RAIM|RAIO|RAIS|RAIT|RAW2INT|RAYCX|RAYCY|RAYLOG|RAYX|RAYY|RCX|RCY|RDM|RDNDT|RDX|RDY|REC|RED|REF|REFL|REFR|REG|REM|REN|RES|REX|REY|RIM|RIRR|RMD|RSI|RSP))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(S)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(SADE|SAG|SAP|SAPI|SARAY|SAV|SBDE|SCA|SCDE|SCO|SDIVX|SDIVY|SEP|SET|SGREF|SH1|SH2|SIN|SLB|SLID|SOL|SPA|SPD|SPG|SPH|SPL|SPLN|SPLR|SPLZ|SPMS|SPO|SPR|SPRAY|SPS|SPWR|SPX|SPY|SRC|SRX|SRY|SSP|SSR|SSZ|STE|STO|STREHL|SUR|SUSE|SUT|SVG|SXDE|SXEX|SYEX|SYDE|SYL|SYS|SZDE))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(T)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(TAR|TCA|TEM|TGR|THI|THM|THO|THR|TIM|TIN|TIR|TIT|TLM|TLT|TOL|TOLC|TOR|TPF|TPI|TPL|TRA|TRR|TSA|TSB|TSEQ|TSF|TSG|TSH|TSI|TSN|TSR|TST|TSV|TSX|TSY|TSZ))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(U)",
					"match":"(^|;|\\(|\\s)((?i)(UCO|UCY|UDG|UDS|UGR|UMX|UMY))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(V)",
					"match":"(^|;|\\(|\\s)((?i)(VAR|VARZ|VIE|VIGP|VLS|VLX|VLY|VPT|VUX|VUY))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(W)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(WAV|WAVPV|WAVZ|WDX|WDY|WEI|WFR|WL|WMF|WRX|WRY|WT|WTC|WTW|WZRN))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(X)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(XAN|XDE|XGR|XIM|XOB|XRI|XSC|XSG))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(Y)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(YAN|YDE|YGR|YIM|YOB|YRI|YSC|YSG|YTO))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment":"(Z)",
					"match":"(^|;|\\(|\\[|\\s)((?i)(ZACT|ZDE|ZED|ZOO|ZRN|ZSC|ZSG|ZWACT|ZWX|ZWY))\\b",
					"captures":{
						"2":{
							"name": "keyword.other.codev"
						}
					}
				},
				{
					"comment": "keywords within one letter",
					"patterns":[
						{
							"comment":"A-D as keyword (aspherical coef)",
							"match":"(^|;|\\(\\s*)([aAbBcCdD])(\\s|;|$)",
							"captures":{
								"2":{
									"name": "keyword.other.codev"
								}
							}
						},
						{
							"comment": "F as constant (field, e.g.(num f))",
							"match": "\\s([fF])(\\s*\\)|;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment":"LMN as keyword (angle cosine)",
							"match":"(^|;|\\(\\s*)([lLmMnN])\\b",
							"captures":{
								"2":{
									"name": "keyword.other.codev"
								}
							}
						},
						{
							"comment": "N as constant (no)",
							"match": "\\s([nN])\\s*(;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment": "S as constant (surface, e.g.(num s))",
							"match": "\\s([sS])(\\s*\\)|;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment": "T as constant (true)",
							"match": "\\s([tT])\\s*(;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment": "W as constant (wavelength)",
							"match": "\\s([wW])(\\s*\\)|;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment":"X as keyword (x-coord.)",
							"match":"(^|;|\\(\\s*)([xX])\\b",
							"captures":{
								"2":{
									"name": "keyword.other.codev"
								}
							}
						},
						{
							"comment":"Y as keyword (y-coord.)",
							"match":"(^|;|\\(\\s*)([yY])\\b",
							"captures":{
								"2":{
									"name": "keyword.other.codev"
								}
							}
						},
						{
							"comment": "Y as constant (yes)",
							"match": "\\s([yY])\\s*(;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						},
						{
							"comment": "Z as keyword (z-coord.)",
							"match":"(^|;|\\(\\s*)([zZ])\\b",
							"captures":{
								"2":{
									"name": "keyword.other.codev"
								}
							}
						},
						{
							"comment": "Z as constant (zoom)",
							"match": "\\s([zZ])(\\s*\\)|;|$)",
							"captures":{
								"1":{
									"name": "constant.other.codev"
								}
							}
						}


					]
				}
			]
		},
		"functions":{
			"patterns":[
				{
					"match": "(^|;|\\(|,|\\s|[\\-\\+\\*\\/\\\\=])((?i)sin|cos|tan|exp|log|log10|logn|sqrt|acos|asin|atan|cosh|sinh|tanh|besj0|besj1|besjn|aint|anint|abs|min|max|sech|csch)\\b",
					"captures":{
						"2":{
							"name": "support.function.language.optalix"
						}
					}
				},
				{
					"comment": "user defined function",
					"match":"(^|;|\\(|,|\\s|[\\-\\+\\*\\/\\\\=])(@[a-zA-Z][a-zA-Z0-9_]*)\\b",
					"captures":{
						"2":{
							"name": "support.function.user-defined.optalix"
						}
					}
				}
			]	
		},
		"colors":{
			"patterns":[
				{
					"comment": "predefined colors",
					"match": "\\b((?i)RED|GRE|BLU|MAG|CYA|YEL|BLA|BRO|ORA|GRY|VIO|TUR|SAL)\\b",
					"captures":{
						"1":{
							"name": "constant.colors.optalix"
						}
					}
				}
			]
		}
	}
}